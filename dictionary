dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}
words = ['cat', 'lion', 'horse']

for word in words:
    if word in dictionary:
        print(word, "->", dictionary[word])
    else:
        print(word, "is not in dictionary")


The code's output looks as follows:

cat -> chat
lion is not in dictionary
horse -> cheval


dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

for key in dictionary.keys():
    print(key, "->", dictionary[key]


The code's output looks as follows:

horse -> cheval
dog -> chien
cat -> chat
output


The sorted() function
Do you want it sorted? Just enrich the for loop to get such a form:

for key in sorted(dictionary.keys()):


The sorted() function will do its best - the output will look like this:

cat -> chat
dog -> chien
horse -> cheval



How to use a dictionary: The items() and values() methods
Another way is based on using a dictionary's method named items(). The method returns tuples (this is the first example where tuples are something more than just an example of themselves) where each tuple is a key-value pair.

This is how it works:

dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

for english, french in dictionary.items():
    print(english, "->", french)


Note the way in which the tuple has been used as a for loop variable.

The example prints:

cat -> chat
dog -> chien
horse -> cheval
output


There is also a method named values(), which works similarly to keys(), but returns values.

Here is a simple example:

dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

for french in dictionary.values():
    print(french)


As the dictionary is not able to automatically find a key for a given value, the role of this method is rather limited.

Here is the expected output:

cheval
chien
chat





How to use a dictionary: modifying and adding values
Assigning a new value to an existing key is simple - as dictionaries are fully mutable, there are no obstacles to modifying them.

We're going to replace the value "chat" with "minou", which is not very accurate, but it will work well with our example.

Look:

dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

dictionary['cat'] = 'minou'
print(dictionary)


The output is:

{'cat': 'minou', 'dog': 'chien', 'horse': 'cheval'}
output


Adding a new key
Adding a new key-value pair to a dictionary is as simple as changing a value - you only have to assign a value to a new, previously non-existent key.

Note: this is very different behavior compared to lists, which don't allow you to assign values to non-existing indices.

Let's add a new pair of words to the dictionary - a bit weird, but still valid:

dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

dictionary['swan'] = 'cygne'
print(dictionary)


The example outputs:

{'cat': 'chat', 'dog': 'chien', 'horse': 'cheval', 'swan': 'cygne'}
output


EXTRA

You can also insert an item to a dictionary by using the update() method, e.g.:

dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

dictionary.update({"duck": "canard"})
print(dictionary)


Removing a key
Can you guess how to remove a key from a dictionary?

Note: removing a key will always cause the removal of the associated value. Values cannot exist without their keys.

This is done with the del instruction.

Here's the example:

dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

del dictionary['dog']
print(dictionary)


Note: removing a non-existing key causes an error.

The example outputs:

{'cat': 'chat', 'horse': 'cheval'}
output


EXTRA

To remove the last item in a dictionary, you can use the popitem() method:

dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}

dictionary.popitem()
print(dictionary)    # outputs: {'cat': 'chat', 'dog': 'chien'}


In the older versions of Python, i.e., before 3.6.7, the popitem() method removes a random item from a dictionary.


